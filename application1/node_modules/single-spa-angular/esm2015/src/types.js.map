{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../libs/single-spa-angular/src/types.ts"],"names":[],"mappings":"","sourcesContent":["import { NgModuleRef, Type, NgZone } from '@angular/core';\nimport { AppProps } from 'single-spa';\nimport { BaseSingleSpaAngularOptions } from 'single-spa-angular/internals';\n\nexport interface SingleSpaAngularOptions<T = Record<string, unknown>>\n  extends BaseSingleSpaAngularOptions {\n  // This might be `noop` if the root module is bootstrapped\n  // with `{ ngZone: 'noop' }` options.\n  NgZone: typeof NgZone | 'noop';\n  updateFunction?(props: AppProps): Promise<any>;\n  // `Router` and `NavigationStart` should be always provided together.\n  Router?: Type<any>;\n  NavigationStart?: Type<any>;\n  bootstrapFunction(props: AppProps & T): Promise<NgModuleRef<any>>;\n}\n\nexport interface BootstrappedSingleSpaAngularOptions extends SingleSpaAngularOptions {\n  bootstrappedModule: NgModuleRef<any> | null;\n  // All below properties can be optional in case of\n  // `SingleSpaAngularOpts.NgZone` is a `noop` string and not an `NgZone` class.\n  bootstrappedNgZone?: NgZone;\n  routingEventListener?: () => void;\n  zoneIdentifier?: string;\n}\n"]}