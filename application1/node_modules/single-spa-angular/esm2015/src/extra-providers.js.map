{"version":3,"file":"extra-providers.js","sourceRoot":"","sources":["../../../libs/single-spa-angular/src/extra-providers.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAkB,MAAM,EAAE,MAAM,eAAe,CAAC;AACnE,OAAO,EACL,wBAAwB,EACxB,gBAAgB,EAGhB,QAAQ,GACT,MAAM,iBAAiB,CAAC;AAKzB,MAAM,OAAO,yBAA0B,SAAQ,wBAAwB;IADvE;;QAEE,iEAAiE;QACjE,0CAA0C;QAClC,qBAAgB,GAAG,KAAK,CAAC;QAEhB,WAAM,GAAG,kCAAkC,CAAC;IAyC/D,CAAC;IAvCC,SAAS,CAAC,KAAU,EAAE,KAAa,EAAE,GAAW;QAC9C,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;IACrC,CAAC;IAED,YAAY,CAAC,KAAU,EAAE,KAAa,EAAE,GAAW;QACjD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;IACxC,CAAC;IAED,UAAU,CAAC,EAA0B;QACnC,6EAA6E;QAC7E,wEAAwE;QACxE,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC;QAE1B,0EAA0E;QAC1E,4EAA4E;QAC5E,6EAA6E;QAC7E,+EAA+E;QAC/E,sDAAsD;QACtD,kFAAkF;QAClF,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAEhC,MAAM,kBAAkB,GAAG,CAAC,KAA0B,EAAE,EAAE;YACxD,oFAAoF;YACpF,kFAAkF;YAClF,sEAAsE;YACtE,MAAM,qCAAqC,GAAG,CAAC,CAAE,KAA2C;iBACzF,SAAS,CAAC;YAEb,IAAI,IAAI,CAAC,gBAAgB,IAAI,qCAAqC,EAAE;gBAClE,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;aAC/B;iBAAM;gBACL,EAAE,CAAC,KAAK,CAAC,CAAC;aACX;QACH,CAAC,CAAC;QAEF,OAAO,KAAK,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;IAC9C,CAAC;;;YA9CF,UAAU;;AAiDX;;;;GAIG;AACH,MAAM,UAAU,0BAA0B;IACxC,OAAO;QACL;YACE,OAAO,EAAE,yBAAyB;YAClC,IAAI,EAAE,CAAC,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC/B;QACD;YACE,OAAO,EAAE,gBAAgB;YACzB,WAAW,EAAE,yBAAyB;SACvC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { Injectable, StaticProvider, Inject } from '@angular/core';\nimport {\n  ɵBrowserPlatformLocation,\n  PlatformLocation,\n  LocationChangeEvent,\n  LocationChangeListener,\n  DOCUMENT,\n} from '@angular/common';\n\ndeclare const Zone: any;\n\n@Injectable()\nexport class SingleSpaPlatformLocation extends ɵBrowserPlatformLocation {\n  // This is a simple marker that helps us to ignore PopStateEvents\n  // that was not dispatched by the browser.\n  private skipNextPopState = false;\n\n  private readonly source = 'Window.addEventListener:popstate';\n\n  pushState(state: any, title: string, url: string): void {\n    this.skipNextPopState = true;\n    super.pushState(state, title, url);\n  }\n\n  replaceState(state: any, title: string, url: string): void {\n    this.skipNextPopState = true;\n    super.replaceState(state, title, url);\n  }\n\n  onPopState(fn: LocationChangeListener): VoidFunction {\n    // `Zone.current` will reference the zone that serves as an execution context\n    // to some specific application, especially when `onPopState` is called.\n    const zone = Zone.current;\n\n    // Wrap any event listener into zone that is specific to some application.\n    // The main issue is `back/forward` buttons of browsers, because they invoke\n    // `history.back|forward` which dispatch `popstate` event. Since `single-spa`\n    // overrides `history.replaceState` Angular's zone cannot intercept this event.\n    // Only the root zone is able to intercept all events.\n    // See https://github.com/single-spa/single-spa-angular/issues/94 for more details\n    fn = zone.wrap(fn, this.source);\n\n    const onPopStateListener = (event: LocationChangeEvent) => {\n      // The `LocationChangeEvent` doesn't have the `singleSpa` property, since it's added\n      // by `single-spa` starting from `5.4` version. We need this check because we want\n      // to skip \"unnatural\" PopStateEvents, the one caused by `single-spa`.\n      const popStateEventWasDispatchedBySingleSpa = !!(event as unknown as { singleSpa: boolean })\n        .singleSpa;\n\n      if (this.skipNextPopState && popStateEventWasDispatchedBySingleSpa) {\n        this.skipNextPopState = false;\n      } else {\n        fn(event);\n      }\n    };\n\n    return super.onPopState(onPopStateListener);\n  }\n}\n\n/**\n * The `PlatformLocation` class is an \"injectee\" of the `PathLocationStrategy`,\n * which creates `Subject` internally for listening on `popstate` events. We want\n * to provide this class in the most top injector that's used during bootstrapping.\n */\nexport function getSingleSpaExtraProviders(): StaticProvider[] {\n  return [\n    {\n      provide: SingleSpaPlatformLocation,\n      deps: [[new Inject(DOCUMENT)]],\n    },\n    {\n      provide: PlatformLocation,\n      useExisting: SingleSpaPlatformLocation,\n    },\n  ];\n}\n"]}